name: Deploy Infrastructure Template

on:
  repository_dispatch:
    types: [infrastructure-deployment]

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.7
  TERRAFORM_DIR: ./templates

permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  validate-input:
    runs-on: ubuntu-latest
    outputs:
      template-name: ${{ steps.validate.outputs.template-name }}
      deployment-id: ${{ steps.validate.outputs.deployment-id }}
      environment: ${{ steps.validate.outputs.environment }}
      callback-url: ${{ steps.validate.outputs.callback-url }}
      callback-token: ${{ steps.validate.outputs.callback-token }}
      parameters: ${{ steps.validate.outputs.parameters }}
    steps:
      - name: Validate Repository Dispatch Payload
        id: validate
        run: |
          echo "Validating repository dispatch payload..."
          
          # Extract and validate required fields
          TEMPLATE_NAME="${{ github.event.client_payload.templateName }}"
          DEPLOYMENT_ID="${{ github.event.client_payload.deploymentId }}"
          ENVIRONMENT="${{ github.event.client_payload.environment || 'dev' }}"
          CALLBACK_URL="${{ github.event.client_payload.callbackUrl }}"
          CALLBACK_TOKEN="${{ github.event.client_payload.callbackToken }}"
          
          # Validate template name
          if [[ ! "$TEMPLATE_NAME" =~ ^(data-explorer|company-pulse|pixelworks|team-polls)$ ]]; then
            echo "Error: Invalid template name: $TEMPLATE_NAME"
            exit 1
          fi
          
          # Validate deployment ID
          if [[ -z "$DEPLOYMENT_ID" ]]; then
            echo "Error: Missing deployment ID"
            exit 1
          fi
          
          # Validate environment
          if [[ ! "$ENVIRONMENT" =~ ^(dev|staging|prod)$ ]]; then
            echo "Error: Invalid environment: $ENVIRONMENT"
            exit 1
          fi
          
          # Set outputs
          echo "template-name=$TEMPLATE_NAME" >> $GITHUB_OUTPUT
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "callback-url=$CALLBACK_URL" >> $GITHUB_OUTPUT
          echo "callback-token=$CALLBACK_TOKEN" >> $GITHUB_OUTPUT
          echo "parameters<<EOF" >> $GITHUB_OUTPUT
          echo '${{ toJson(github.event.client_payload.parameters) }}' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "âœ… Validation successful"
          echo "Template: $TEMPLATE_NAME"
          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "Environment: $ENVIRONMENT"

  send-status:
    runs-on: ubuntu-latest
    needs: [validate-input]
    if: always()
    strategy:
      matrix:
        status: [started, planning, applying, completed, failed]
    steps:
      - name: Send Status Update
        if: |
          (matrix.status == 'started' && needs.validate-input.result == 'success') ||
          (matrix.status == 'failed' && needs.validate-input.result == 'failure')
        run: |
          STATUS="${{ matrix.status }}"
          if [[ "${{ needs.validate-input.result }}" == "failure" ]]; then
            STATUS="failed"
          fi
          
          curl -X POST "${{ needs.validate-input.outputs.callback-url }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ needs.validate-input.outputs.callback-token }}" \
            -d '{
              "deploymentId": "${{ needs.validate-input.outputs.deployment-id }}",
              "status": "'$STATUS'",
              "message": "Deployment '$STATUS'",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'"
            }' || echo "Failed to send status update"

  terraform-plan:
    runs-on: ubuntu-latest
    needs: [validate-input]
    environment: ${{ needs.validate-input.outputs.environment }}
    outputs:
      plan-exitcode: ${{ steps.plan.outputs.exitcode }}
      plan-summary: ${{ steps.plan.outputs.summary }}
    steps:
      - name: Checkout Infrastructure Repository
        uses: actions/checkout@v4
        with:
          repository: wjesseclements/site-generator-infrastructure
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Send Planning Status
        run: |
          curl -X POST "${{ needs.validate-input.outputs.callback-url }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ needs.validate-input.outputs.callback-token }}" \
            -d '{
              "deploymentId": "${{ needs.validate-input.outputs.deployment-id }}",
              "status": "planning",
              "message": "Creating Terraform execution plan...",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'"
            }' || echo "Failed to send status update"

      - name: Prepare Terraform Variables
        id: vars
        run: |
          cd ${{ env.TERRAFORM_DIR }}/${{ needs.validate-input.outputs.template-name }}
          
          # Create terraform.tfvars from payload parameters
          echo "# Auto-generated from deployment request" > terraform.tfvars
          echo "deployment_id = \"${{ needs.validate-input.outputs.deployment-id }}\"" >> terraform.tfvars
          echo "environment = \"${{ needs.validate-input.outputs.environment }}\"" >> terraform.tfvars
          
          # Parse and add custom parameters
          echo '${{ needs.validate-input.outputs.parameters }}' | jq -r '
            to_entries[] | 
            if .value | type == "string" then
              "\(.key) = \"\(.value)\""
            else
              "\(.key) = \(.value)"
            end
          ' >> terraform.tfvars
          
          echo "Generated terraform.tfvars:"
          cat terraform.tfvars

      - name: Terraform Init
        run: |
          cd ${{ env.TERRAFORM_DIR }}/${{ needs.validate-input.outputs.template-name }}
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ needs.validate-input.outputs.environment }}/${{ needs.validate-input.outputs.template-name }}/${{ needs.validate-input.outputs.deployment-id }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"

      - name: Terraform Validate
        run: |
          cd ${{ env.TERRAFORM_DIR }}/${{ needs.validate-input.outputs.template-name }}
          terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ env.TERRAFORM_DIR }}/${{ needs.validate-input.outputs.template-name }}
          
          # Run terraform plan and capture exit code
          set +e
          terraform plan -detailed-exitcode -out=tfplan
          EXITCODE=$?
          set -e
          
          echo "exitcode=$EXITCODE" >> $GITHUB_OUTPUT
          
          # Generate plan summary
          if [ $EXITCODE -eq 0 ]; then
            echo "summary=No changes needed" >> $GITHUB_OUTPUT
          elif [ $EXITCODE -eq 2 ]; then
            SUMMARY=$(terraform show -no-color tfplan | head -20)
            echo "summary<<EOF" >> $GITHUB_OUTPUT
            echo "$SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "summary=Plan failed" >> $GITHUB_OUTPUT
            exit $EXITCODE
          fi

      - name: Upload Plan Artifact
        if: steps.plan.outputs.exitcode == '2'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ needs.validate-input.outputs.deployment-id }}
          path: ${{ env.TERRAFORM_DIR }}/${{ needs.validate-input.outputs.template-name }}/tfplan
          retention-days: 1

  terraform-apply:
    runs-on: ubuntu-latest
    needs: [validate-input, terraform-plan]
    if: needs.terraform-plan.outputs.plan-exitcode == '2'
    environment: ${{ needs.validate-input.outputs.environment }}
    outputs:
      apply-result: ${{ steps.apply.outputs.result }}
      infrastructure-outputs: ${{ steps.outputs.outputs }}
    steps:
      - name: Checkout Infrastructure Repository
        uses: actions/checkout@v4
        with:
          repository: wjesseclements/site-generator-infrastructure
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Send Applying Status
        run: |
          curl -X POST "${{ needs.validate-input.outputs.callback-url }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ needs.validate-input.outputs.callback-token }}" \
            -d '{
              "deploymentId": "${{ needs.validate-input.outputs.deployment-id }}",
              "status": "applying",
              "message": "Applying Terraform configuration...",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'"
            }' || echo "Failed to send status update"

      - name: Prepare Terraform Variables
        run: |
          cd ${{ env.TERRAFORM_DIR }}/${{ needs.validate-input.outputs.template-name }}
          
          # Recreate terraform.tfvars from payload parameters
          echo "# Auto-generated from deployment request" > terraform.tfvars
          echo "deployment_id = \"${{ needs.validate-input.outputs.deployment-id }}\"" >> terraform.tfvars
          echo "environment = \"${{ needs.validate-input.outputs.environment }}\"" >> terraform.tfvars
          
          # Parse and add custom parameters
          echo '${{ needs.validate-input.outputs.parameters }}' | jq -r '
            to_entries[] | 
            if .value | type == "string" then
              "\(.key) = \"\(.value)\""
            else
              "\(.key) = \(.value)"
            end
          ' >> terraform.tfvars

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ needs.validate-input.outputs.deployment-id }}
          path: ${{ env.TERRAFORM_DIR }}/${{ needs.validate-input.outputs.template-name }}/

      - name: Terraform Init
        run: |
          cd ${{ env.TERRAFORM_DIR }}/${{ needs.validate-input.outputs.template-name }}
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ needs.validate-input.outputs.environment }}/${{ needs.validate-input.outputs.template-name }}/${{ needs.validate-input.outputs.deployment-id }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"

      - name: Terraform Apply
        id: apply
        run: |
          cd ${{ env.TERRAFORM_DIR }}/${{ needs.validate-input.outputs.template-name }}
          
          set +e
          terraform apply -auto-approve tfplan
          EXITCODE=$?
          set -e
          
          if [ $EXITCODE -eq 0 ]; then
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "result=failure" >> $GITHUB_OUTPUT
            exit $EXITCODE
          fi

      - name: Capture Terraform Outputs
        id: outputs
        if: steps.apply.outputs.result == 'success'
        run: |
          cd ${{ env.TERRAFORM_DIR }}/${{ needs.validate-input.outputs.template-name }}
          
          # Capture all outputs as JSON
          OUTPUTS=$(terraform output -json)
          echo "outputs<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTPUTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  finalize-deployment:
    runs-on: ubuntu-latest
    needs: [validate-input, terraform-plan, terraform-apply]
    if: always()
    steps:
      - name: Determine Final Status
        id: status
        run: |
          if [[ "${{ needs.terraform-plan.result }}" == "failure" ]]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "message=Terraform planning failed" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.terraform-plan.outputs.plan-exitcode }}" == "0" ]]; then
            echo "status=completed" >> $GITHUB_OUTPUT
            echo "message=No infrastructure changes required" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.terraform-apply.result }}" == "failure" ]]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "message=Terraform apply failed" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.terraform-apply.result }}" == "success" ]]; then
            echo "status=completed" >> $GITHUB_OUTPUT
            echo "message=Infrastructure deployed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "message=Unknown deployment error" >> $GITHUB_OUTPUT
          fi

      - name: Send Final Status
        run: |
          # Prepare payload with outputs if available
          PAYLOAD='{
            "deploymentId": "${{ needs.validate-input.outputs.deployment-id }}",
            "status": "${{ steps.status.outputs.status }}",
            "message": "${{ steps.status.outputs.message }}",
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'"'
          
          # Add infrastructure outputs if deployment was successful
          if [[ "${{ steps.status.outputs.status }}" == "completed" && -n "${{ needs.terraform-apply.outputs.infrastructure-outputs }}" ]]; then
            PAYLOAD=$(echo "$PAYLOAD" | jq --argjson outputs '${{ needs.terraform-apply.outputs.infrastructure-outputs }}' '. + {infrastructureOutputs: $outputs}')
          fi
          
          PAYLOAD="$PAYLOAD}"
          
          curl -X POST "${{ needs.validate-input.outputs.callback-url }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ needs.validate-input.outputs.callback-token }}" \
            -d "$PAYLOAD" || echo "Failed to send final status update"

      - name: Cleanup Artifacts
        if: always()
        run: |
          echo "Deployment ${{ needs.validate-input.outputs.deployment-id }} finalized with status: ${{ steps.status.outputs.status }}"